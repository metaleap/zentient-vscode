{
	"scopeName": "source.atem",
	"name": "atem",
	"comment": "atem language",
	"fileTypes": [
		"at"
	],
	"patterns": [
		{
			"name": "comment.line.double-slash.atem",
			"begin": "//",
			"end": "$"
		},
		{
			"name": "comment.block.atem",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keyops"
		},
		{
			"include": "#opishs"
		},
		{
			"include": "#stdlib"
		},
		{
			"include": "#runes"
		},
		{
			"name": "invalid.illegal.numeric.atem",
			"match": "\\b0[0-7]*[89]\\d*\\b"
		},
		{
			"name": "constant.numeric.floating-point.atem",
			"match": "(\\.\\d+([Ee][\\-\\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\\-\\+]\\d+)?i?\\b)?"
		},
		{
			"name": "constant.numeric.integer.atem",
			"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\\-\\+]\\d+i?))\\b"
		},
		{
			"name": "string.quoted.double.atem",
			"begin": "\"",
			"end": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.atem"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.atem"
				}
			},
			"patterns": [
				{
					"include": "#string_escaped_char"
				}
			]
		},
		{
			"name": "string.quoted.raw.atem",
			"begin": "`",
			"end": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.atem"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.atem"
				}
			}
		},
		{
			"xmatch": "\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"name": "invalid.illegal.identifier.atem",
							"match": "\\d\\w*"
						},
						{
							"name": "entity.other.definition.atem",
							"match": "\\w+"
						},
						{
							"include": "delimiters"
						}
					]
				}
			}
		},
		{
			"name": "variable",
			"match": "\\b_\\w*\\b"
		},
		{
			"name": "entity.other.attribute-name",
			"match": "\\b\\p{Upper}\\w{1}\\w+\\b"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"end": "}",
					"patterns": [
						{
							"include": "$self"
						}
					],
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.atem"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.atem"
						}
					}
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "$self"
						}
					],
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.atem"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.atem"
						}
					}
				},
				{
					"name": "punctuation.definition.bracket.square.atem",
					"match": "\\[|\\]"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"name": "punctuation.other.ampersand.atem",
					"match": "\\s&{1}\\s"
				},
				{
					"name": "punctuation.other.comma.atem",
					"match": ","
				},
				{
					"name": "punctuation.other.period.atem",
					"match": "(\\b|\\s)\\.(\\b|\\s)"
				},
				{
					"name": "punctuation.other.colon.atem",
					"match": ":(?!=)"
				}
			]
		},
		"keyops": {
			"patterns": [
				{
					"name": "keyword.control.atem",
					"match": "\\s(\\?|:=|\\|)\\s"
				}
			]
		},
		"opishs": {
			"patterns": [
				{
					"name": "keyword.operator.atem",
					"match": "[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']]+"
				}
			]
		},
		"stdlib": {
			"patterns": [
				{
					"name": "support.function.atem",
					"match": "\\b(if|must|not|self|only)\\b"
				},
				{
					"name": "support.type.atem",
					"match": "\\b(bool)\\b"
				},
				{
					"name": "support.constant.atem",
					"match": "\\b(True|False|true|false)\\b"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"name": "string.quoted.rune.atem",
					"begin": "'",
					"end": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.atem"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.atem"
						}
					},
					"patterns": [
						{
							"name": "constant.other.rune.atem",
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')"
						},
						{
							"name": "invalid.illegal.unknown-rune.atem",
							"match": "[^']+"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"name": "constant.character.escape.atem",
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				},
				{
					"name": "invalid.illegal.unknown-escape.atem",
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]"
				}
			]
		}
	}
}
