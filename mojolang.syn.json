{
	"scopeName": "source.mo",
	"name": "Mojo",
	"comment": "Mojo language",
	"fileTypes": [
		"mo"
	],
	"foldingStartMarker": "({|\\()\\s*$",
	"foldingStopMarker": "(}|\\))\\s*$",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"comment": "Interpreted string literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.mo"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.mo"
				}
			},
			"name": "string.quoted.double.mo",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.mo"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.mo"
				}
			},
			"name": "string.quoted.raw.mo",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error receiving channels",
			"match": "<\\-([\\t ]+)chan\\b",
			"captures": {
				"1": {
					"name": "invalid.illegal.receive-channel.mo"
				}
			}
		},
		{
			"comment": "Syntax error sending channels",
			"match": "\\bchan([\\t ]+)<-",
			"captures": {
				"1": {
					"name": "invalid.illegal.send-channel.mo"
				}
			}
		},
		{
			"comment": "Syntax error using slices",
			"match": "\\[\\](\\s+)",
			"captures": {
				"1": {
					"name": "invalid.illegal.slice.mo"
				}
			}
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "\\b0[0-7]*[89]\\d*\\b",
			"name": "invalid.illegal.numeric.mo"
		},
		{
			"comment": "Built-in functions",
			"match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()",
			"name": "support.function.builtin.mo"
		},
		{
			"comment": "Function declarations",
			"match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
			"captures": {
				"1": {
					"name": "keyword.function.mo"
				},
				"2": {
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"include": "#operators"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.mo"
						},
						{
							"match": "\\w+",
							"name": "entity.name.function.mo"
						}
					]
				}
			}
		},
		{
			"comment": "Functions",
			"match": "(\\bfunc\\b)|(\\w+)(?=\\()",
			"captures": {
				"1": {
					"name": "keyword.function.mo"
				},
				"2": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.mo"
						},
						{
							"match": "\\w+",
							"name": "support.function.mo"
						}
					]
				}
			}
		},
		{
			"comment": "Floating-point literals",
			"match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?",
			"name": "constant.numeric.floating-point.mo"
		},
		{
			"comment": "Integers",
			"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
			"name": "constant.numeric.integer.mo"
		},
		{
			"comment": "Language constants",
			"match": "\\b(True|False|Nil|Cons|Unit|Void)\\b",
			"name": "constant.language.mo"
		},
		{
			"begin": "\\b(keepforlater_package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.package.mo"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.mo"
				},
				{
					"match": "\\w+",
					"name": "entity.name.package.mo"
				}
			]
		},
		{
			"begin": "\\b(type)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.type.mo"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.mo"
				},
				{
					"match": "\\w+",
					"name": "entity.name.type.mo"
				}
			]
		},
		{
			"begin": "\\b(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.mo"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#imports"
				}
			]
		},
		{
			"begin": "\\b(var)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.var.mo"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#variables"
				}
			]
		},
		{
			"match": "(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.mo"
						},
						{
							"match": "\\w+(?:\\.\\w+)*",
							"name": "variable.other.assignment.mo",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.mo"
						},
						{
							"match": "\\w+",
							"name": "variable.other.assignment.mo"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.mo"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.mo"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.mo"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.mo"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.mo"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.mo"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.mo"
						}
					},
					"name": "comment.block.mo"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.mo"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.mo"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.mo"
				},
				{
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.mo"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.mo"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"match": "((?!\\s+\")[^\\s]*)?\\s*((\")([^\"]*)(\"))",
					"captures": {
						"1": {
							"name": "entity.alias.import.mo"
						},
						"2": {
							"name": "string.quoted.double.mo"
						},
						"3": {
							"name": "punctuation.definition.string.begin.mo"
						},
						"4": {
							"name": "entity.name.import.mo"
						},
						"5": {
							"name": "punctuation.definition.string.end.mo"
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.imports.begin.bracket.round.mo"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.imports.end.bracket.round.mo"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#imports"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "\\b(CASE|OF)\\b",
					"name": "keyword.control.mo"
				},
				{
					"match": "\\bLET\\b",
					"name": "keyword.let.mo"
				},
				{
					"match": "\\bIN\\b",
					"name": "keyword.in.mo"
				}
			]
		},
		"operators": {
			"comment": "Note that the order here is very important!",
			"patterns": [
				{
					"match": "(\\*|&)(?=\\w)",
					"name": "keyword.operator.address.mo"
				},
				{
					"match": "<\\-",
					"name": "keyword.operator.channel.mo"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.mo"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.mo"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.mo"
				},
				{
					"match": "(&&|\\|\\||!)",
					"name": "keyword.operator.logical.mo"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.mo"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.mo"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
					"name": "keyword.operator.arithmetic.bitwise.mo"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.mo"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.mo"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.mo"
						}
					},
					"name": "string.quoted.rune.mo",
					"patterns": [
						{
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')",
							"name": "constant.other.rune.mo"
						},
						{
							"match": "[^']+",
							"name": "invalid.illegal.unknown-rune.mo"
						}
					]
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\bkeepforlater_bool\\b",
					"name": "storage.type.boolean.mo"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.mo"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.mo"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
					"name": "constant.other.placeholder.mo"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.mo"
								},
								{
									"match": "\\w+",
									"name": "variable.other.assignment.mo"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.mo"
								},
								{
									"match": "\\w+",
									"name": "variable.other.declaration.mo"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variables.begin.bracket.round.mo"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.mo"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		}
	}
}
