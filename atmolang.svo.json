{
	"scopeName": "source.atmo",
	"name": "atmo",
	"comment": "atmo language",
	"fileTypes": [
		"at"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#topleveldefs"
		},
		{
			"include": "#nonsense"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.atmo",
					"begin": "//",
					"end": "$"
				},
				{
					"name": "comment.block.atmo",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"brackets": {
			"patterns": [
				{
					"name": "punctuation.definition.bracket.round.atmo",
					"match": "\\(|\\)"
				},
				{
					"name": "punctuation.definition.bracket.curly.atmo",
					"match": "{|}"
				},
				{
					"name": "punctuation.definition.bracket.square.atmo",
					"match": "\\[|\\]"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"name": "punctuation.other.ampersand.atmo",
					"match": "\\s+&\\s+|\\b&|&\\b"
				},
				{
					"name": "punctuation.other.comma.atmo",
					"match": ","
				},
				{
					"name": "punctuation.other.period.atmo",
					"match": "(\\b|\\s)\\.(\\b|\\s)"
				},
				{
					"name": "punctuation.other.colon.atmo",
					"match": ":(?!=)"
				}
			]
		},
		"keyops": {
			"patterns": [
				{
					"name": "keyword.control.atmo",
					"match": "\\s+(\\|\\s+\\?|\\?|\\|)\\s+"
				}
			]
		},
		"opishs": {
			"patterns": [
				{
					"name": "keyword.other.atmo",
					"match": "\\s+:=\\s+"
				},
				{
					"name": "keyword.operator.atmo",
					"match": "(?!(&|:=|\\?|\\|)\\s+)[\\p{S}\\p{P}&&[^(),\\[\\]`{}_\"']]+"
				}
			]
		},
		"stdlib": {
			"patterns": [
				{
					"name": "support.function.atmo",
					"match": "\\b(if|must|not|self|only)\\b"
				},
				{
					"name": "support.type.atmo",
					"match": "\\b(bool)\\b"
				},
				{
					"name": "support.constant.atmo markup.italic",
					"match": "\\b(True|False|true|false)\\b"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"name": "string.quoted.rune.atmo string.quoted.single.atmo",
					"begin": "'",
					"end": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.atmo"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.atmo"
						}
					},
					"patterns": [
						{
							"name": "constant.other.rune.atmo constant.character.atmo",
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')"
						},
						{
							"name": "invalid.illegal.unknown-rune.atmo",
							"match": "[^']+"
						}
					]
				}
			]
		},
		"numlits": {
			"patterns": [
				{
					"name": "invalid.illegal.numeric.atmo",
					"match": "\\b0[0-7]*[89]\\d*\\b"
				},
				{
					"name": "constant.numeric.floating-point.atmo",
					"match": "(\\.\\d+([Ee][\\-\\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\\-\\+]\\d+)?i?\\b)?"
				},
				{
					"name": "constant.numeric.integer.atmo",
					"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\\-\\+]\\d+i?))\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.atmo",
					"begin": "\"",
					"end": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.atmo"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.atmo"
						}
					},
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"name": "string.quoted.raw.atmo string.quoted.other.atmo",
					"begin": "`",
					"end": "`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.atmo"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.atmo"
						}
					}
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"name": "constant.character.escape.atmo",
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
				},
				{
					"name": "invalid.illegal.unknown-escape.atmo",
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]"
				}
			]
		},
		"vars": {
			"patterns": [
				{
					"name": "variable.other.atmo",
					"match": "\\b_\\w*\\b"
				}
			]
		},
		"tags": {
			"patterns": [
				{
					"name": "constant.other.atmo markup.italic",
					"match": "\\b\\p{Upper}\\w{1}\\w*\\b"
				}
			]
		},
		"toplevelargs": {
			"patterns": [
				{
					"match": "((?!(,))\\S)+",
					"captures": {
						"0": {
							"patterns": [
								{
									"match": ":\\S+",
									"name": "storage.atmo"
								},
								{
									"match": "((?!:)\\S)+(?=:|\\z)",
									"name": "variable.parameter.atmo"
								}
							]
						}
					}
				}
			]
		},
		"topleveldefs": {
			"patterns": [
				{
					"begin": "^\\S+((?!//).)*?\\s+:=\\s+",
					"end": ".*?(?=^[^\\s(/\\*)]+.*?)",
					"name": "meta.function.atmo",
					"docinfo": "captures/0 is before the `:=` (incl.) and patterns is after (excl)",
					"captures": {
						"0": {
							"name": "meta.function.header.atmo markup.bold",
							"patterns": [
								{
									"name": "meta.function.header.annotation.atmo markup.italic",
									"match": ",.*\\s+:=\\s+",
									"captures": {
										"0": {
											"patterns": [
												{
													"include": "#common_body"
												}
											]
										}
									}
								},
								{
									"include": "#topleveldef_svo"
								},
								{
									"include": "#topleveldef_misc"
								}
							]
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"match": "(,((?!//).)*?\\s+:=\\s+)|([^,\\s]+((?!(//))[^,])*?\\s+:=\\s+)",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#comments"
										},
										{
											"match": "[^,\\s]+.*?(?=\\s+:=\\s+)",
											"name": "entity.other.local.atmo markup.underline",
											"captures": {
												"0": {
													"patterns": [
														{
															"match": ":\\S+",
															"name": "storage.atmo"
														},
														{
															"include": "#common_head"
														},
														{
															"match": "((?!:)\\S)+(?=:|\\s+|\\z)",
															"name": "variable.parameter.atmo"
														}
													]
												}
											}
										}
									]
								}
							}
						},
						{
							"include": "#common_body"
						}
					]
				}
			]
		},
		"nonsense": {
			"patterns": [
				{
					"match": ".*",
					"name": "invalid.atmo"
				}
			]
		},
		"common_body": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#delimiters"
				},
				{
					"include": "#keyops"
				},
				{
					"include": "#common"
				}
			]
		},
		"common_head": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#delimiters"
				},
				{
					"include": "#common"
				}
			]
		},
		"common": {
			"patterns": [
				{
					"include": "#opishs"
				},
				{
					"include": "#stdlib"
				},
				{
					"include": "#runes"
				},
				{
					"include": "#numlits"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#tags"
				},
				{
					"include": "#vars"
				}
			]
		},
		"topleveldef_svo": {
			"match": "(^\\S+(?=((\\s*,\\s*)|(\\s+:=\\s+))))|(^(?:((?!(:=|,))\\S)+\\s+){1}(((?!(:=|,))\\S)+))",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "(\\s+\\S+)|(\\S+\\z)",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#topleveldef_fname"
										}
									]
								}
							}
						},
						{
							"include": "#topleveldef_misc"
						}
					]
				}
			}
		},
		"topleveldef_vso": {
			"match": "^.*?(?=((\\s*,\\s*)|(\\s+:=\\s+)))",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "(^\\S+(\\b|\\s))|(^\\S+\\z)",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#topleveldef_fname"
										}
									]
								}
							}
						},
						{
							"include": "#topleveldef_misc"
						}
					]
				}
			}
		},
		"topleveldef_sov": {
			"match": "^.*?(?=((\\s*,\\s*)|(\\s+:=\\s+)))",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\s*\\S+\\z",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#topleveldef_fname"
										}
									]
								}
							}
						},
						{
							"include": "#topleveldef_misc"
						}
					]
				}
			}
		},
		"topleveldef_fname": {
			"patterns": [
				{
					"match": "_\\S+",
					"name": "entity.name.function.atmo markup.underline"
				},
				{
					"match": "\\S+",
					"name": "entity.name.function.atmo"
				}
			]
		},
		"topleveldef_misc": {
			"patterns": [
				{
					"include": "#common_head"
				},
				{
					"include": "#toplevelargs"
				}
			]
		}
	}
}
